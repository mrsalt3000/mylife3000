#!/usr/bin/env python
# pylint: disable=unused-argument

import logging
import random
from typing import Dict

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import ContextTypes, ConversationHandler

from config import (
    MAIN_MENU, SECTION_MENU, THEME, RESULT,
    MAIN_MENU_KEYBOARD, SECTION_MENU_KEYBOARD, RESULT_MENU_KEYBOARD
)
from database import db
from questionary import Questionary

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user = update.effective_user
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –≤ –ë–î (–±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        dialog_id = await db.start_dialog()
        context.user_data['dialog_id'] = dialog_id
        logger.info(f"Started dialog {dialog_id}")
        
    except Exception as e:
        logger.error(f"Error logging dialog start: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å

    await update.message.reply_text(
        "–Ø –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ –ø–æ—Ä–∞–∑–º—ã—à–ª—è—Ç—å –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —Å–µ–±–µ –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –∏ –º–µ–º—É–∞—Ä–æ–≤\n\n"
        "–ë–æ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å /cancel —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥.\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=ReplyKeyboardMarkup(
            MAIN_MENU_KEYBOARD, 
            input_field_placeholder="–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª"
        ),
    )
    return MAIN_MENU

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    user_choice = update.message.text
    
    questionary: Questionary = context.bot_data['questionary']
    
    if user_choice in questionary.get_all_sections():
        context.user_data['current_section'] = user_choice
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        try:
            if 'dialog_id' in context.user_data:
                await db.update_dialog_state(context.user_data['dialog_id'], f'section_{user_choice}')
        except Exception as e:
            logger.error(f"Error updating dialog state: {e}")
            
        return await show_section_menu(update, context, questionary)
    elif user_choice == "–û –ø—Ä–æ–µ–∫—Ç–µ":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–û –ø—Ä–æ–µ–∫—Ç–µ"
        await end_dialog(context, 'project_info')
        await update.message.reply_text(
"""

–ü—Ä–∏–≤–µ—Ç! 
–≠—Ç–æ—Ç –±–æ—Ç ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. 
–ú—ã —Å–æ–±—Ä–∞–ª–∏ –≥–ª—É–±–æ–∫–∏–µ –∏ –∏–Ω–æ–≥–¥–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å —Å–µ–±—è –∏ —Å–æ–∑–¥–∞—Ç—å –∂–∏–≤—ã–µ –º–µ–º—É–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–ø–∏—à–µ—à—å –ø–æ —à–∞–±–ª–æ–Ω—É.

–ö–∞–∫ —Å —ç—Ç–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å? –í—Å—ë –ø—Ä–æ—Å—Ç–æ:
    1. –í—ã–±–∏—Ä–∞–π —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è —Ç–µ–±–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
    2. –ü–æ–ª—É—á–∞–π –∫–∞—Ä—Ç–æ—á–∫—É —Å –≤–æ–ø—Ä–æ—Å–æ–º. 
        –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å, –¥–∞–π —Å–µ–±–µ –≤—Ä–µ–º—è –æ—â—É—Ç–∏—Ç—å –µ–≥–æ.
    3. –û—Ç–≤–µ—á–∞–π —Ç–∞–∫, –∫–∞–∫ —á—É–≤—Å—Ç–≤—É–µ—à—å. 
        –£ –Ω–∞—Å –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞. 
        –¢—ã –º–æ–∂–µ—à—å:
            ‚Ä¢ –ó–∞–ø–∏—Å—å –º—ã—Å–ª–µ–π –≤ —Å–≤–æ–π –±—É–º–∞–∂–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ üìì
            ‚Ä¢ –ù–∞–≥–æ–≤–æ—Ä–∏—Ç—å –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üéôÔ∏è
            ‚Ä¢ –°–Ω—è—Ç—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –Ω–∞ –≤–∏–¥–µ–æ üé•
            ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º –∑–∞ —á–∞—à–∫–æ–π —á–∞—è ‚òï

–ë–æ—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ.
–ë–æ—Ç –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç, –ù–ï –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ù–ï –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–≤–æ–∏–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º. –¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–º.
–ì–æ—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏? 
–ñ–º–∏ /start!""",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤"
        )
        return MAIN_MENU

async def show_section_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, questionary: Questionary) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""
    section_name = context.user_data['current_section']
    
    description = questionary.get_section_description(section_name)

    await update.message.reply_text(
        f"{description}\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            SECTION_MENU_KEYBOARD, 
            input_field_placeholder="–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è"
        ),
    )
    return SECTION_MENU

async def handle_section_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ."""
    user_choice = update.message.text
    questionary: Questionary = context.bot_data['questionary']
    section_name = context.user_data.get('current_section')
    
    if user_choice == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await start(update, context)
    elif user_choice == "–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å":
        if section_name:
            random_question = questionary.get_random_question(section_name)
            if random_question:
                await update.message.reply_text(
                    f"üìñ {random_question}\n\n"
                    "–•–æ—á–µ—à—å –µ—â–µ –≤–æ–ø—Ä–æ—Å? –û—Ç–ø—Ä–∞–≤—å /start",
                    reply_markup=ReplyKeyboardRemove()
                )
                await end_dialog(context, 'random_question')
                return ConversationHandler.END
        
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=ReplyKeyboardMarkup(SECTION_MENU_KEYBOARD)
        )
        return SECTION_MENU
    elif user_choice == "–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É":
        return await theme_choice(update, context, questionary)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
        )
        return SECTION_MENU

async def theme_choice(update: Update, context: ContextTypes.DEFAULT_TYPE, questionary: Questionary) -> int:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã."""
    section_name = context.user_data.get('current_section')
    if not section_name:
        return await start(update, context)
        
    themes = questionary.get_themes(section_name)
    reply_keyboard = [[theme] for theme in themes] + [["–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]

    await update.message.reply_text(
        "üéØ –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–æ–≤:",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, 
            input_field_placeholder="–í—ã–±–æ—Ä —Ç–µ–º—ã"
        ),
    )
    return THEME

async def handle_theme_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å."""
    theme = update.message.text
    questionary: Questionary = context.bot_data['questionary']
    section_name = context.user_data.get('current_section')
    
    if not section_name:
        return await start(update, context)
    
    if theme == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await start(update, context)
    elif theme == "–ù–∞–∑–∞–¥":
        return await show_section_menu(update, context, questionary)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ
    themes = questionary.get_themes(section_name)
    if theme in themes:
        question = questionary.get_random_question(section_name, theme)
        
        if question:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            try:
                if 'dialog_id' in context.user_data:
                    await db.update_dialog_state(context.user_data['dialog_id'], f'theme_{theme}')
            except Exception as e:
                logger.error(f"Error updating dialog state: {e}")
            
            await update.message.reply_text(
                f"üìñ {question}\n\n"
                "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                reply_markup=ReplyKeyboardMarkup(RESULT_MENU_KEYBOARD)
            )
            context.user_data['last_theme'] = theme
            context.user_data['last_section'] = section_name
            return RESULT
    
    # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    themes = questionary.get_themes(section_name)
    reply_keyboard = [[theme] for theme in themes] + [["–ù–∞–∑–∞–¥", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–º",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard)
    )
    return THEME

async def handle_result_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    choice = update.message.text
    questionary: Questionary = context.bot_data['questionary']
    
    if choice == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await start(update, context)
    elif choice == "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã\n/start",
            reply_markup=ReplyKeyboardRemove()
        )
        await end_dialog(context, 'completed')
        return ConversationHandler.END

    last_theme = context.user_data.get('last_theme')
    last_section = context.user_data.get('last_section')
    
    if choice == "–ï—â–µ –≤–æ–ø—Ä–æ—Å":
        if last_section and last_theme:
            question = questionary.get_random_question(last_section, last_theme)
            if question:
                await update.message.reply_text(
                    f"üìñ {question}\n\n"
                    "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                    reply_markup=ReplyKeyboardMarkup(RESULT_MENU_KEYBOARD)
                )
                return RESULT
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–µ–º—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã
        return await theme_choice(update, context, questionary)
    
    elif choice == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É":
        return await theme_choice(update, context, questionary)
    
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
        )
        return RESULT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text(
        "–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã\n/start", 
        reply_markup=ReplyKeyboardRemove()
    )
    await end_dialog(context, 'cancelled')
    return ConversationHandler.END

async def end_dialog(context: ContextTypes.DEFAULT_TYPE, state: str = 'completed'):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        if 'dialog_id' in context.user_data:
            await db.end_dialog(context.user_data['dialog_id'], state)
            logger.info(f"Dialog {context.user_data['dialog_id']} ended with state: {state}")
            # –£–¥–∞–ª—è–µ–º ID –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            del context.user_data['dialog_id']
    except Exception as e:
        logger.error(f"Error ending dialog: {e}")